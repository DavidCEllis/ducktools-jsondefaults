"""
This type stub file was generated by pyright.
"""
import typing

from ducktools.lazyimporter import LazyImporter, MultiFromImport, get_module_funcs
from collections.abc import Callable
import types

if typing.TYPE_CHECKING:
    from ._caching_tools import (
        field_default,
        dataclass_default,
        make_dataclass_default,
    )

__version__: str = ...
__all__: list[str] = [
    "merge_defaults",
    "field_default",
    "method_default",
    "dataclass_default",
    "make_dataclass_default",
    "JSONRegister",
]
_laz: LazyImporter = ...

def merge_defaults(
    *defaults: Callable[[object], typing.Any]
) -> Callable[[object], typing.Any]:
    """
    Combine multiple default functions into one.

    Default functions are expected to return serializable objects or raise a TypeError

    :param defaults: 'default' functions for json.dumps
    :return: merged default function
    """
    ...

def method_default(method_name: str) -> Callable[[object], typing.Any]:
    """
    Given a method name, create a `default` function for json.dumps
    that will serialize any objects that have that method.

    :param method_name: name of the method that assists in serializing
    :return: default function to provide to json.dumps
    """
    ...

class _RegisterDecorator:
    func: Callable[[object], typing.Any]
    registry: JSONRegister

    def __init__(
        self, func: Callable[[object], typing.Any], registry: JSONRegister
    ) -> None: ...
    def __set_name__(self, owner: type, name: str) -> None: ...

_FuncT = typing.TypeVar("_FuncT", bound=Callable[[object], typing.Any])

class JSONRegister:
    """
    Register methods for serializing classes, provides a 'default' method
    to give to `dumps` style functions.

    Provides a method to add a serializer for any class and two decorators
    to decorate functions and class methods to register them as serializers.
    """

    registry: list[tuple[type, Callable[[object], typing.Any]]]

    def __init__(self) -> None: ...
    def register(self, cls: type, func: Callable[[object], typing.Any]) -> None:
        """
        Register a function that will convert a class instance into something
        that is serializable by the json.dumps function.

        :param cls: Class object
        :param func: Single argument callable that will convert instances of cls
                     into serializable objects
        """
        ...
    def register_function(self, cls: type) -> Callable[[_FuncT], _FuncT]:
        """Register a function as a serializer by using a decorator"""
        ...
    @property
    def register_method(self) -> Callable[[_FuncT], _FuncT]:
        """Register a class method as a serializer by using a decorator"""
        ...
    def default(self, o: object) -> Callable[[object], typing.Any]:
        """
        Default function to provide to a json.dumps call as the `default` argument.
        :param o: object to serialize
        :return: serializable data
        """
        ...
